   //////////////////////////////////////////////
  //        2.8" TOUCH SCREEN DEMO            //
 //                                          //
//           http://www.educ8s.tv           //
/////////////////////////////////////////////

//#include <Adafruit_TFTLCD.h> 
#include <MCUFRIEND_kbv.h>
#include <Adafruit_GFX.h>    
#include <TouchScreen.h>
#include <EEPROM.h>

#define SERIAL

#define LCD_CS A3 
#define LCD_CD A2 
#define LCD_WR A1 
#define LCD_RD A0 
#define LCD_RESET A4 

#define TS_MINX 105
#define TS_MINY 85
#define TS_MAXX 970
#define TS_MAXY 940

#define YP A2  // must be an analog pin, use "An" notation!
#define XM A3  // must be an analog pin, use "An" notation!
#define YM 8   // can be a digital pin
#define XP 9   // can be a digital pin

#define BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

//Button Positions
#define TEMP_DOWN_X 220
#define TEMP_DOWN_Y 71
#define TEMP_UP_X 265
#define TEMP_UP_Y 71
#define HUM_DOWN_X 220
#define HUM_DOWN_Y 116
#define HUM_UP_X 265
#define HUM_UP_Y 116

#define BACK_X 265
#define BACK_Y 5
#define NEXT_X 265
#define NEXT_Y 190
#define PREV_X 20
#define PREV_Y 190

#define BUTTON_H 30
#define BUTTON_W 35

//User settings memoy locations
#define TS_MEM 0
#define HS_MEM 1

MCUFRIEND_kbv tft;
//Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);
//GFXcanvas1 canvas(38, 38);
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300);

int period = 20;
unsigned long time_now = 0;
TSPoint p;
int8_t humidSetpoint;      //setpoints for system to adjust to
int8_t tempSetpoint;
bool tempButtonState = true;    //flag to indicate if button has been pressed
bool humidButtonState = true;
bool configButtonState = true;
bool homeButtonState = true;
int screen = 1;


const unsigned char backButton [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0xff, 0xf7, 0xff, 0xff, 0xe0, 0xff, 0xe7, 0xff, 0xff, 0xe0, 0xff, 0xc7, 
	0xff, 0xff, 0xe0, 0xff, 0x87, 0xff, 0xff, 0xe0, 0xff, 0x00, 0x01, 0xff, 0xe0, 0xfe, 0x00, 0x00, 
	0x7f, 0xe0, 0xfc, 0x00, 0x00, 0x1f, 0xe0, 0xfe, 0x00, 0x00, 0x0f, 0xe0, 0xff, 0x00, 0x00, 0x0f, 
	0xe0, 0xff, 0x87, 0xfc, 0x07, 0xe0, 0xff, 0xc7, 0xfe, 0x07, 0xe0, 0xff, 0xe7, 0xff, 0x07, 0xe0, 
	0xff, 0xf7, 0xff, 0x07, 0xe0, 0xff, 0xff, 0xff, 0x07, 0xe0, 0xff, 0xff, 0xfe, 0x07, 0xe0, 0xff, 
	0xff, 0xfc, 0x0f, 0xe0, 0xff, 0xff, 0x00, 0x0f, 0xe0, 0xff, 0xff, 0x00, 0x1f, 0xe0, 0xff, 0xff, 
	0x00, 0x1f, 0xe0, 0xff, 0xff, 0x00, 0x7f, 0xe0, 0xff, 0xff, 0x01, 0xff, 0xe0, 0xff, 0xff, 0xff, 
	0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0
};

const unsigned char configMenuButton [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0x1f, 0xe0, 0xff, 
	0xff, 0xfe, 0x1f, 0xe0, 0xff, 0xff, 0xfc, 0x7f, 0xe0, 0xff, 0xff, 0xf8, 0xff, 0xe0, 0xff, 0xff, 
	0xf8, 0xf9, 0xe0, 0xff, 0xff, 0xf8, 0xf9, 0xe0, 0xff, 0xff, 0xf8, 0x71, 0xe0, 0xff, 0xff, 0xf0, 
	0x03, 0xe0, 0xff, 0xff, 0xe0, 0x07, 0xe0, 0xff, 0xff, 0xc0, 0x0f, 0xe0, 0xff, 0xff, 0x80, 0xff, 
	0xe0, 0xff, 0xff, 0x01, 0xff, 0xe0, 0xff, 0xfe, 0x03, 0xff, 0xe0, 0xff, 0xfc, 0x07, 0xff, 0xe0, 
	0xff, 0xf8, 0x0f, 0xff, 0xe0, 0xff, 0xf0, 0x1f, 0xff, 0xe0, 0xff, 0x00, 0x3f, 0xff, 0xe0, 0xfe, 
	0x00, 0x7f, 0xff, 0xe0, 0xfc, 0x00, 0xff, 0xff, 0xe0, 0xf8, 0xe1, 0xff, 0xff, 0xe0, 0xf9, 0xf1, 
	0xff, 0xff, 0xe0, 0xf9, 0xf1, 0xff, 0xff, 0xe0, 0xf9, 0xf1, 0xff, 0xff, 0xe0, 0xf8, 0xe3, 0xff, 
	0xff, 0xe0, 0xfc, 0x07, 0xff, 0xff, 0xe0, 0xfe, 0x0f, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0
};

const unsigned char rightButton[] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0xff, 0xe7, 0xff, 0xff, 0xe0, 0xff, 0xe1, 0xff, 0xff, 0xe0, 0xff, 0xf0, 0x7f, 
	0xff, 0xe0, 0xff, 0xf0, 0x1f, 0xff, 0xe0, 0xff, 0xf8, 0x07, 0xff, 0xe0, 0xff, 0xf8, 0x01, 0xff, 
	0xe0, 0xff, 0xfc, 0x00, 0x7f, 0xe0, 0xff, 0xfc, 0x00, 0x3f, 0xe0, 0xff, 0xfc, 0x00, 0x7f, 0xe0, 
	0xff, 0xf8, 0x01, 0xff, 0xe0, 0xff, 0xf8, 0x07, 0xff, 0xe0, 0xff, 0xf0, 0x1f, 0xff, 0xe0, 0xff, 
	0xf0, 0x7f, 0xff, 0xe0, 0xff, 0xe1, 0xff, 0xff, 0xe0, 0xff, 0xe7, 0xff, 0xff, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 
	0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0
};

const unsigned char leftButton [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0xff, 0xff, 0xfc, 0xff, 0xe0, 0xff, 0xff, 0xf0, 0xff, 0xe0, 0xff, 0xff, 0xc1, 
	0xff, 0xe0, 0xff, 0xff, 0x01, 0xff, 0xe0, 0xff, 0xfc, 0x03, 0xff, 0xe0, 0xff, 0xf0, 0x03, 0xff, 
	0xe0, 0xff, 0xc0, 0x07, 0xff, 0xe0, 0xff, 0x80, 0x07, 0xff, 0xe0, 0xff, 0xc0, 0x07, 0xff, 0xe0, 
	0xff, 0xf0, 0x03, 0xff, 0xe0, 0xff, 0xfc, 0x03, 0xff, 0xe0, 0xff, 0xff, 0x01, 0xff, 0xe0, 0xff, 
	0xff, 0xc1, 0xff, 0xe0, 0xff, 0xff, 0xf0, 0xff, 0xe0, 0xff, 0xff, 0xfc, 0xff, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 
	0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0
};

const unsigned char plusButton [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xfe, 
	0x0f, 0xff, 0xe0, 0xff, 0xfe, 0x0f, 0xff, 0xe0, 0xff, 0xfe, 0x0f, 0xff, 0xe0, 0xff, 0xfe, 0x0f, 
	0xff, 0xe0, 0xff, 0xfe, 0x0f, 0xff, 0xe0, 0xff, 0xfe, 0x0f, 0xff, 0xe0, 0xff, 0x80, 0x00, 0x3f, 
	0xe0, 0xff, 0x80, 0x00, 0x3f, 0xe0, 0xff, 0x80, 0x00, 0x3f, 0xe0, 0xff, 0x80, 0x00, 0x3f, 0xe0, 
	0xff, 0x80, 0x00, 0x3f, 0xe0, 0xff, 0xfe, 0x0f, 0xff, 0xe0, 0xff, 0xfe, 0x0f, 0xff, 0xe0, 0xff, 
	0xfe, 0x0f, 0xff, 0xe0, 0xff, 0xfe, 0x0f, 0xff, 0xe0, 0xff, 0xfe, 0x0f, 0xff, 0xe0, 0xff, 0xfe, 
	0x0f, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 
	0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0
};

const unsigned char minusButton [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 
	0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0x00, 0x00, 0x1f, 
	0xe0, 0xff, 0x00, 0x00, 0x1f, 0xe0, 0xff, 0x00, 0x00, 0x1f, 0xe0, 0xff, 0x00, 0x00, 0x1f, 0xe0, 
	0xff, 0x00, 0x00, 0x1f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 
	0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xe0
};
void setup() {
  Serial.begin(9600);
  Serial.print("Starting...");
  tft.reset();
  tft.begin(tft.readID());
  tft.setRotation(3);
  Serial.begin(9600);
  Serial.println();
  Serial.print("reading id....0x");
  delay(500);
  Serial.println(tft.readID(), HEX);
  tft.fillScreen(BLACK);
  //Read setpoints from EEPROM
  tempSetpoint = EEPROM.read(TS_MEM);
  humidSetpoint = EEPROM.read(HS_MEM);
}

void loop() 
{
  time_now = millis();  //get current time
  // Delay between measurements.
  while(millis() < time_now + period){
    TSPoint p = ts.getPoint();  //Get touch point
    if (p.z > ts.pressureThreshhold) {

      p.x = map(p.x, TS_MINX, TS_MAXX, 0, 320);
      p.y = map(p.y, TS_MINY, TS_MAXY, 0, 240);
      #ifdef SERIAL
      Serial.print("X = "); Serial.print(p.x);
      Serial.print("\tY = "); Serial.print(p.y);
      Serial.print("\n");
      #endif
      //Detect button presses on config screen
      if(screen){   
        //Next config screen button
        if(checkButton(p, NEXT_X, NEXT_Y, configButtonState, rightButton, *nextButtonCallback)){continue;}
        //Prev config screen button
        else if(checkButton(p, PREV_X, PREV_Y, configButtonState, leftButton, *prevButtonCallback)){continue;}
        //Return from config to home button
        else if(checkButton(p, BACK_X, BACK_Y, configButtonState, backButton, *backButtonCallback)){continue;}

        if(screen == 1){
          //Temp Setpoint DOWN button pressed
          if(checkButton(p, TEMP_DOWN_X, TEMP_DOWN_Y, tempButtonState, minusButton, *tempDownButtonCallback)){continue;}
          //Temp Setpoint UP button pressed
          else if(checkButton(p, TEMP_UP_X, TEMP_UP_Y, tempButtonState, plusButton, *tempUpButtonCallback)){continue;}
          //Humidity UP button pressed
          else if(checkButton(p, HUM_UP_X, HUM_UP_Y, humidButtonState, plusButton, *humidUpButtonCallback)){continue;}
          //Humidity DOWN button pressed
          else if(checkButton(p, HUM_DOWN_X, HUM_DOWN_Y, humidButtonState, minusButton, *humidDownButtonCallback)){continue;}
        }
        else if(screen == 2){
        }
      }
      //Home Screen buttons
      else{
        //Home screen to config screen button
        if(checkButton(p, BACK_X, BACK_Y, homeButtonState, configMenuButton, *homeButtonCallback)){continue;}
      }
    }
  }
  if(screen){
    displayConfig();
  }
  else{
    displayHome();
  }
}

/*
 * Simple function to refresh buttons on display by changing each buttons
 * flag
 */
void drawButtons(){
  humidButtonState = true;
  tempButtonState = true;
  configButtonState = true;
  homeButtonState = true;
}
/*
 * Display home screen
 */
void displayHome(){
  pinMode(XM, OUTPUT);
  pinMode(YP, OUTPUT);

  //Animate home page buttons
  if(homeButtonState){
    tft.fillScreen(BLACK);
    drawButtons();
    tft.fillRect(NEXT_X, NEXT_Y, BUTTON_W, BUTTON_H, BLACK);
    tft.drawBitmap(BACK_X, BACK_Y, configMenuButton, BUTTON_W, BUTTON_H, WHITE);
  }
  homeButtonState = false;
  tft.setCursor(6,8);
  tft.print("Hello World");
  tft.drawRect(0,0,320,240,WHITE);
}
/*
 * Display config screen
 */
void displayConfig(){
  
  pinMode(XM, OUTPUT);
  pinMode(YP, OUTPUT);
  //Animate config page buttons 
  if(configButtonState){
    tft.fillScreen(BLACK);
    drawButtons();
    tft.fillRect(NEXT_X, NEXT_Y, BUTTON_W, BUTTON_H, BLACK);
    tft.drawBitmap(NEXT_X, NEXT_Y, rightButton, BUTTON_W, BUTTON_H, WHITE);    //Next page button
    tft.fillRect(PREV_X, PREV_Y, BUTTON_W, BUTTON_H, BLACK);
    tft.drawBitmap(PREV_X, PREV_Y, leftButton, BUTTON_W, BUTTON_H, WHITE);    //Previous page button
    tft.fillRect(BACK_X, BACK_Y, BUTTON_W, BUTTON_H, BLACK);
    tft.drawBitmap(BACK_X, BACK_Y, backButton, BUTTON_W, BUTTON_H, WHITE);    //Back Button
  }
  configButtonState = false;
  //Draw Header
  tft.setCursor(6, 8);
  tft.setTextColor(WHITE, BLACK);
  tft.setTextSize(3);
  tft.print("Config");
  tft.setCursor(142,200);
  tft.setTextSize(2);
  tft.print(screen);
  tft.print("/3");
  tft.drawFastHLine(0, 40, 320, WHITE);
  tft.drawRect(0,0,320,240,WHITE);

  //Temperature and humidity setpoint screen
  if(screen == 1){
    tft.setTextSize(2);
    tft.setCursor(6, 49);
    tft.println("Setpoints:");
    tft.setCursor(24, 79);
    tft.print("Temp.     ");
    tft.print(tempSetpoint);
    tft.write(0xF7);
    tft.println("F ");
    tft.setCursor(24, 125);
    tft.print("Humidity  ");
    tft.print(humidSetpoint);
    tft.println("% ");
    //Animate temperature adjustment buttons
    if(tempButtonState){
      tft.fillRect(TEMP_DOWN_X, TEMP_DOWN_Y, BUTTON_W, BUTTON_H, BLACK);
      tft.drawBitmap(TEMP_DOWN_X, TEMP_DOWN_Y, minusButton, BUTTON_W, BUTTON_H, WHITE); //Temperature down
      tft.fillRect(TEMP_UP_X, TEMP_UP_Y, BUTTON_W, BUTTON_H, BLACK);
      tft.drawBitmap(TEMP_UP_X, TEMP_UP_Y, plusButton, BUTTON_W, BUTTON_H, WHITE);      //Temperature up
    }
    //Animate humidity adjustment buttons
    if(humidButtonState){
      tft.fillRect(HUM_DOWN_X, HUM_DOWN_Y, BUTTON_W, BUTTON_H, BLACK);
      tft.drawBitmap(HUM_DOWN_X, HUM_DOWN_Y, minusButton, BUTTON_W, BUTTON_H, WHITE); //Humidity down
      tft.fillRect(HUM_UP_X, HUM_UP_Y, BUTTON_W, BUTTON_H, BLACK);
      tft.drawBitmap(HUM_UP_X, HUM_UP_Y, plusButton, BUTTON_W, BUTTON_H, WHITE);      //Humidity up
    }
    humidButtonState = false;
    tempButtonState = false;
  }
  //Light and time config screen
  else if(screen == 2){
    tft.setTextSize(2);
    tft.setCursor(6, 49);
    tft.print("Light and Time:");
  }
  //Interval adjustment config screen
  else if(screen == 3){
    tft.setTextSize(2);
    tft.setCursor(6, 49);
    tft.print("Intervals:");
  }
}

bool checkButton(TSPoint p, int x, int y, bool &state, 
            unsigned char *bitmap, void (*func)()){

  if(p.x>x && p.x<x + BUTTON_W && p.y>y && p.y<y + BUTTON_H){
    if(!state){
      func();
    }
    state = true;
    pinMode(XM, OUTPUT);
    pinMode(YP, OUTPUT);
    tft.fillRect(x, y, BUTTON_W, BUTTON_H, WHITE);
    tft.fillRect(x + 1, y + 8, BUTTON_W - 2, BUTTON_H - 9, BLACK);
    drawInvertBitmap(x, y + 3, bitmap, BUTTON_W, BUTTON_H - 3, WHITE);  
    return true;
  }
  return false;
}


void tempUpButtonCallback(){
  tempSetpoint++;
}
void tempDownButtonCallback(){
  tempSetpoint--;
}
void humidUpButtonCallback(){
  humidSetpoint++;
}
void humidDownButtonCallback(){
  humidSetpoint--;
}
void homeButtonCallback(){
  screen = 1;
}
void backButtonCallback(){
  screen = 0;
  if(tempSetpoint != EEPROM.read(TS_MEM)){
    EEPROM.write(TS_MEM, tempSetpoint);
  }
  if(humidSetpoint != EEPROM.read(HS_MEM)){
    EEPROM.write(HS_MEM, humidSetpoint);
  }
}
void nextButtonCallback(){
  if(screen == 3){
    screen = 1;
  }
  else{
    screen++;
  }
}
void prevButtonCallback(){
  if(screen == 1){
    screen = 3;
  }
  else{
    screen--;
  }
}
void drawInvertBitmap(int16_t x, int16_t y,
            const uint8_t *bitmap, int16_t w, int16_t h,
            uint16_t color) {

  int16_t i, j, byteWidth = (w + 7) / 8;

  for(j=0; j<h; j++) {
    for(i=0; i<w; i++ ) {
      if((pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7)))==0) {
        tft.drawPixel(x+i, y+j, color);
      }
    }
  }
}
